/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.prosdev.cakacaka.view.panel;

import com.prosdev.cakacaka.entity.Gender;
import com.prosdev.cakacaka.entity.Group;
import com.prosdev.cakacaka.entity.Student;
import com.prosdev.cakacaka.manager.SpringManager;
import com.prosdev.cakacaka.service.StudentService;
import com.prosdev.cakacaka.view.panel.tablemodel.HurufRender;
import com.prosdev.cakacaka.view.panel.tablemodel.TableModelStudent;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;

/**
 *
 * @author Administrator
 */
public class PanelGenerateGrup extends javax.swing.JPanel {

    private TableModelStudent tableModel;
    public PanelGenerateGrup() {
        initComponents();
        
        tableModel=new TableModelStudent();
        jTable1.setModel(tableModel);
        jTable1.getColumnModel().getColumn(0).setMaxWidth(50);
        jTable1.getColumnModel().getColumn(0).setCellRenderer(new HurufRender());
        jTable1.getColumnModel().getColumn(1).setCellRenderer(new HurufRender());
        jTable1.getColumnModel().getColumn(2).setCellRenderer(new HurufRender());
        jTable1.getColumnModel().getColumn(3).setCellRenderer(new HurufRender());  
        jTable1.getColumnModel().getColumn(4).setCellRenderer(new HurufRender()); 
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        viewPortX1 = new com.prosdev.cakacaka.component.ViewPortX();
        jTable1 = new javax.swing.JTable();
        panelX1 = new com.prosdev.cakacaka.component.PanelX();
        buttonGreen1 = new com.prosdev.cakacaka.component.ButtonGreen();
        buttonBlue1 = new com.prosdev.cakacaka.component.ButtonBlue();
        jLabel1 = new javax.swing.JLabel();
        numberOfGroup = new javax.swing.JFormattedTextField();
        jScrollPane1 = new javax.swing.JScrollPane();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable1.setOpaque(false);
        viewPortX1.add(jTable1);

        setOpaque(false);

        panelX1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 1, true));

        buttonGreen1.setText("GENERATE");
        buttonGreen1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonGreen1ActionPerformed(evt);
            }
        });

        buttonBlue1.setText("SAVE");

        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Number of Group :");

        numberOfGroup.setValue(new Integer(1));

        javax.swing.GroupLayout panelX1Layout = new javax.swing.GroupLayout(panelX1);
        panelX1.setLayout(panelX1Layout);
        panelX1Layout.setHorizontalGroup(
            panelX1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelX1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(numberOfGroup, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 289, Short.MAX_VALUE)
                .addComponent(buttonGreen1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(buttonBlue1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12))
        );
        panelX1Layout.setVerticalGroup(
            panelX1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelX1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelX1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(buttonBlue1, javax.swing.GroupLayout.DEFAULT_SIZE, 69, Short.MAX_VALUE)
                    .addGroup(panelX1Layout.createSequentialGroup()
                        .addGroup(panelX1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(numberOfGroup, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(buttonGreen1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        jScrollPane1.setOpaque(false);
        jScrollPane1.setViewport(viewPortX1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelX1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 623, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelX1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(351, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(123, 123, 123)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 318, Short.MAX_VALUE)
                    .addGap(14, 14, 14)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void buttonGreen1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonGreen1ActionPerformed
        // TODO add your handling code here:
        tableModel.hapusSemua();
        generate();
    }//GEN-LAST:event_buttonGreen1ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.prosdev.cakacaka.component.ButtonBlue buttonBlue1;
    private com.prosdev.cakacaka.component.ButtonGreen buttonGreen1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JFormattedTextField numberOfGroup;
    private com.prosdev.cakacaka.component.PanelX panelX1;
    private com.prosdev.cakacaka.component.ViewPortX viewPortX1;
    // End of variables declaration//GEN-END:variables
    
    private void generate (){
        
       StudentService studentService=SpringManager.getINSTANCE().getBean(StudentService.class);
       List<Student> list=studentService.findAll();
       Integer semua=studentService.countRows();
       List<Student> girls=studentService.findAll(Gender.FEMALE);
       List<Student> boys=studentService.findAll(Gender.MALE);
       Integer jumlah=girls.size()+boys.size();
       Integer groups=(Integer) numberOfGroup.getValue();
        if (groups < 1) {
            JOptionPane.showMessageDialog(this, "Number of group not valid!");
            return;
        }
       
       Double groupMembers = Math.ceil(jumlah.doubleValue()/groups.doubleValue()) +1;
//       List<Group> listgroup=new ArrayList<>();
//       Group group;
//        for (int i = 0; i < groupMembers; i++) {
//            group=new Group();
//            group.setName("Kelompok OS "+i+1);
//            listgroup.add(group);
//        }
//        
//        for (Group group1 : listgroup) {
//            if (group1.getStudentList().size() < groups) {
//                
//            }
//        }
        int x = 0,y=0;
        for (int i = 1; i < groupMembers; i++) {           
            String klompok="Kelompok "+i;
            for (int j = 1; j <= groups; j++) {
                if (j%2 == 0) {
                    int random=0;
                    if (y<boys.size()) {
                        do {      
                            random=(int) (Math.random()*boys.size());
                        } while (boys.get(random).getChoosen());
                        y=y+1;
                        Student hasil=boys.get(random);
                        hasil.setGroup(klompok);
                        hasil.setChoosen(Boolean.TRUE);
                        boys.get(random).setChoosen(Boolean.TRUE);

                        tableModel.tambah(hasil);
                        if ((boys.size()+girls.size())==tableModel.getList().size()) {
                            break;
                        }     
                    } else {
                        
                        if (x < girls.size()) {
                            do {      
                                random=(int) (Math.random()*girls.size());
                            } while (girls.get(random).getChoosen());
                            Student hasil=girls.get(random);
                            x=x+1;
                            hasil.setGroup(klompok);
                            hasil.setChoosen(Boolean.TRUE);
                            girls.get(random).setChoosen(Boolean.TRUE);

                            tableModel.tambah(hasil);
                            if ((boys.size()+girls.size())==tableModel.getList().size()) {
                                break;
                            }
                        }
                        
                    }
                                   
                } else {
                    int random=0;
                    if (x < girls.size()) {
                        do {      
                            random=(int) (Math.random()*girls.size());
                        } while (girls.get(random).getChoosen());
                        Student hasil=girls.get(random);
                        x=x+1;
                        hasil.setGroup(klompok);
                        hasil.setChoosen(Boolean.TRUE);
                        girls.get(random).setChoosen(Boolean.TRUE);

                        tableModel.tambah(hasil);
                        if ((boys.size()+girls.size())==tableModel.getList().size()) {
                            break;
                        }
                    } else {
                        
                        if (y<boys.size()) {
                            do {      
                                random=(int) (Math.random()*boys.size());
                            } while (boys.get(random).getChoosen());
                            y=y+1;
                            Student hasil=boys.get(random);
                            hasil.setGroup(klompok);
                            hasil.setChoosen(Boolean.TRUE);
                            boys.get(random).setChoosen(Boolean.TRUE);

                            tableModel.tambah(hasil);
                            if ((boys.size()+girls.size())==tableModel.getList().size()) {
                                break;
                            }     
                        }
                        
                    }
                    
                }
                
                
            }            
        }
        
//        for (int i = 1; i < groupMembers; i++) {           
//            String klompok="Kelompok "+i;
//            int random=0;
//            do {  
//                do {                    
//                    random=(int) (Math.random()*list.size());
//                } while (list.get(random).getGender().equals(Gender.FEMALE));               
//                
//            } while (list.get(random).getChoosen());
//            Student hasil=list.get(random);
//            hasil.setGroup(klompok);
//            hasil.setChoosen(Boolean.TRUE);
//            
//            tableModel.tambah(hasil);
//        }
    }
}
